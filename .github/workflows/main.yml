name: Autocoder Bot Workflow

on: 
  issues:
    types: [opened, reopened, labeled]
env:
    ISSUE_TITLE: ${{ github.event.issue.title }}
    ISSUE_NUMBER: ${{ github.event.issue.number }}
    ISSUE_BODY: ${{ github.event.issue.body }}
    ISSUE_ASSIGNEES: ${{ join(github.event.issue.assignees.*.login, ', ') }}
    ISSUE_LABELS: ${{ join(github.event.issue.labels.*.name, ', ') }}

    REPO_NAME: ${{github.repository}}
    # ISSUE_NUM: ${{github.event.issue.number}}
    OPENAI_API_KEY: ${{secrets.OPENAI_KEY}}
    GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}


jobs:
  
  process_issue:
    runs-on: ubuntu-latest
    # timeout-minutes: 5
    if: contains(github.event.issue.labels.*.name, 'autocoder-bot')
    steps:
      - name: Checkout repository for Process Issue
        uses: actions/checkout@v4

      - name: Validate issue information
        id: validate
        run: |
          # Fail if required information is missing
          if [ -z "$ISSUE_BODY" ]; then
            echo "Error: Issue body is empty"
            exit 1
          fi
          # Output issue information for logging
          echo "issue_number=${ISSUE_NUMBER}" >> $GITHUB_OUTPUT
          echo "has_required_label=${{ contains(env.ISSUE_LABELS, 'autocoder-bot') }}" >> $GITHUB_OUTPUT

  generate_code: 
    needs: process_issue
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'autocoder-bot') 
    outputs:
      generation_status: ${{ steps.generation.outputs.status }}
    
    steps:
      - name: Checkout repository generate code
        uses: actions/checkout@v4
      
      - name: Set up environment
        id: setup
        run: |
          echo "Setting up environment..."
          echo "REPO_NAME: ${{ env.REPO_NAME }}"
          echo "ISSUE_NUMBER: ${{ env.ISSUE_NUMBER }}"

      - name: Prepare artifact directory
        id: prepare-directory
        run: |
          # directory for generated code from autobot
          mkdir -p ./autocoder-bot

      - name: Run GPT interaction script
        id: generation
        run: |
          chmod u+x ./scripts/script.sh
          # bash ./scripts/script.sh 
          # Add error handling
          if ! bash ./scripts/script.sh; then
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Verify files were generated
          if [ ! "$(ls -A ./autocoder-bot/)" ]; then
            echo "No files were generated in ./autocoder-bot/"
            exit 1
          fi
          echo "status=success" >> $GITHUB_OUTPUT

      - name: List generated files
        run: |
          echo "Generated files in autocoder-bot"
          ls -la ./autocoder-bot/    
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: autocoder-artifact
          path: |
            ./autocoder-bot/
          if-no-files-found: error
          retention-days: 1
        


  handle_artifacts:
    needs: [process_issue, generate_code]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: contains(github.event.issue.labels.*.name, 'autocoder-bot') 
    steps: 
      # Step 0 Download the artifacts
      - name: Download artificats
        uses: actions/download-artifact@v4
        with: 
          name: autocoder-artifact
          path: ./autocoder-bot/
      - name: Verify Download 
        run: |
         if [ ! -d "./autocoder-bot" ]; then
          echo "Error: Artifact directory called autocoder-bot not found"
          exit 1
         fi

      - name: Display results
        run: |
          echo "Generated files in artifact autocoder-bot directory:"
          ls -laR ./autocoder-bot || echo "Failed to list autocoder artifact"

  