name: Autocoder Bot Workflow

on: 
  issues:
    types: [opened, reopened, labeled]
env:
    ISSUE_TITLE: ${{ github.event.issue.title }}
    ISSUE_NUMBER: ${{ github.event.issue.number }}
    ISSUE_BODY: ${{ github.event.issue.body }}
    ISSUE_ASSIGNEES: ${{ join(github.event.issue.assignees.*.login, ', ') }}
    ISSUE_LABELS: ${{ join(github.event.issue.labels.*.name, ', ') }}

    REPO_NAME: ${{github.repository}}
    # ISSUE_NUM: ${{github.event.issue.number}}
    OPENAI_API_KEY: ${{secrets.OPENAI_KEY}}
    GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}


jobs:

  check_labels_autocoder-bot:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{steps.check.outputs.has_label}}
    steps:
      - id: check
        run: |
          if [[ "${{ contains(github.event.issue.labels.*.name, 'autocoder-bot') }}" == "true" ]]; then
            echo "Issue does not contain autocoder-bot label"
            echo "has_label=true" >> $GITHUB_OUTPUT
          else
            echo "has_label=false" >> $GITHUB_OUTPUT
          fi
 
  process_issue:
    needs: check_labels_autocoder-bot
    if: needs.check_labels_autocoder-bot.should_run == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 5
  
    steps:
      - name: Checkout repository for Process Issue
        uses: actions/checkout@v4
        # with:
        #   fetch-depth: 1 # Shallow clone for faster checkout

      - name: Validate issue information
        id: validate
        run: |
          # Fail if required information is missing
          if [ -z "$ISSUE_BODY" ]; then
            echo "Error: Issue body is empty"
            exit 1
          fi
          # Output issue information for logging
          echo "issue_number=${ISSUE_NUMBER}" >> $GITHUB_OUTPUT
          echo "has_required_label=${{ contains(env.ISSUE_LABELS, 'autocoder-bot') }}" >> $GITHUB_OUTPUT

  generate_code: 
    needs: process_issue
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: needs.process_issue.result == 'success'
    
    outputs:
      generation_status: ${{ steps.generation.outputs.status }}
    
    steps:
      - name: Set up environment
        id: setup
        run: |
          echo "Setting up environment..."
          echo "REPO_NAME: ${{ env.REPO_NAME }}"
          echo "ISSUE_NUMBER: ${{ env.issue_number }}"

      - name: Run GPT interaction script
        id: generation
        run: |
          chmod u+x ./scripts/script.sh
          # Add error handling
          if ! bash ./scripts/script.sh; then
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "status=success" >> $GITHUB_OUTPUT
  
  handle_artifacts:
    needs: [process_issue, generate_code]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: |
      needs.generate_code.outputs.generations_status == 'success' &&
      needs.process_issue.result == 'success'
    
    steps: 
      - name: Checkout repository for handle artifacts
        uses: actions/checkout@v4
    
      - name: Prepare artifact directory
        id: prepare
        run: |
          mkdir -p ./autocoder-bot
          # Verify directory exists
          if [ ! -d "./autocoder-bot" ]; then
            echo "Failed to create artifact directory"
            exit 1
          fi
      
      - name: Upload generated code
        uses: actions/upload-artifact@v4
        with:
          name: autocoder-artifact-${{ github.event.issue.number }}
          path: |
            ./autocoder-bot/         # Include everything in the directory
            !./autocoder-bot/*.tmp   # Exclude temporary files
            !./autocoder-bot/*.log   # Exclude log files
          if-no-files-found: warn
          retention-days: 2
      
      - name: Download and verify artifacts
        id: verify
        uses: actions/download-artifact@v4
        with:
          name: autocoder-artifact-${{ github.event.issue.number }}
          path: ~/autocoder-artifact
      
      - name: Display results
        run: |
          echo "Generated files:"
          ls -aR ~/autocoder-artifact


  