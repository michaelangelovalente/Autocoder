name: Autocoder Bot Workflow

on: 
  issues:
    types: [opened, reopened, labeled]
env:
    ISSUE_TITLE: ${{ github.event.issue.title }}
    ISSUE_NUMBER: ${{ github.event.issue.number }}
    ISSUE_BODY: ${{ github.event.issue.body }}
    ISSUE_ASSIGNEES: ${{ join(github.event.issue.assignees.*.login, ', ') }}
    ISSUE_LABELS: ${{ join(github.event.issue.labels.*.name, ', ') }}

    REPO_NAME: ${{github.repository}}
    # ISSUE_NUM: ${{github.event.issue.number}}
    OPENAI_API_KEY: ${{secrets.OPENAI_KEY}}
    GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}


jobs:

  check_labels_autocoder_bot:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.has_label }}
    steps:
      - id: check
        run: |
          if [[ "${{ contains(github.event.issue.labels.*.name, 'autocoder-bot') }}" == "true" ]]; then
            echo "Issue does not contain autocoder-bot label"
            echo "${{env.ISSUE_LABELS}}"
            echo "has_label=true" >> $GITHUB_OUTPUT
          else
            echo "has_label=false" >> $GITHUB_OUTPUT
          fi   
  
  # check_labels_output_test:
  #   runs-on: ubuntu-latest
  #   # timeout-minutes: 5
  
  #   steps:
  #     - name: Checkout repository for Process Issue
  #       uses: actions/checkout@v4
  #       # with:
  #       #   fetch-depth: 1 # Shallow clone for faster checkout

  #     - name: Check output
  #       id: output_check
  #       run: |
  #         echo "Has label result: ${{ check_labels_autocoder_bot.should_run }}"
      
  process_issue:
    needs: check_labels_autocoder_bot
    if: needs.check_labels_autocoder_bot.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    # timeout-minutes: 5
  
    steps:
      - name: Checkout repository for Process Issue
        uses: actions/checkout@v4
        # with:
        #   fetch-depth: 1 # Shallow clone for faster checkout

      - name: Validate issue information
        id: validate
        run: |
          # Fail if required information is missing
          if [ -z "$ISSUE_BODY" ]; then
            echo "Error: Issue body is empty"
            exit 1
          fi
          # Output issue information for logging
          echo "issue_number=${ISSUE_NUMBER}" >> $GITHUB_OUTPUT
          echo "has_required_label=${{ contains(env.ISSUE_LABELS, 'autocoder-bot') }}" >> $GITHUB_OUTPUT

  generate_code: 
    needs: process_issue
    runs-on: ubuntu-latest
    # timeout-minutes: 10
    if: needs.process_issue.result == 'success'
    
    outputs:
      generation_status: ${{ steps.generation.outputs.status }}
    
    steps:
      - name: Checkout repository generate code
        uses: actions/checkout@v4
      
      - name: Set up environment
        id: setup
        run: |
          echo "Setting up environment..."
          echo "REPO_NAME: ${{ env.REPO_NAME }}"
          echo "ISSUE_NUMBER: ${{ env.issue_number }}"

      - name: Run GPT interaction script
        id: generation
        run: |
          chmod u+x ./scripts/script.sh
          # bash ./scripts/script.sh 
          # Add error handling
          if ! bash ./scripts/script.sh; then
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "status=success" >> $GITHUB_OUTPUT
      - name: Prepare artifact directory
        id: prepare-directory
        run: |
          # directory for generated code from autobot
          mkdir -p ./autocoder-bot
          # directory for artifacts
          mkdir -p ./autocoder-artifact
          
      - name: Upload artifact
#        # if: steps.generation.status == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: autocoder-artifact-test-upload
          path: |
            ./autcoder-bot/
          if-no-files-found: error
          retention-days: 1
        


  # //TODO --> UPLOAD generate code jobs
  handle_artifacts:
    needs: [process_issue, generate_code]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: |
      needs.generate_code.outputs.generation_status == 'success' &&
      needs.process_issue.result == 'success'
    
    steps: 
      # - name: checkout repository for handle artifacts
      #   uses: actions/checkout@v4
    
      # - name: prepare artifact directory
      #   id: prepare
      #   run: |
      #     # directory for code generation
      #     mkdir -p ./autocoder-bot
      #     # directory for artifacts
      #     mkdir -p ./autocoder-artifact

      #     # verify directories exists
      #     # if [ ! -d "./autocoder-bot" ] || [ ! -d "./autocoder-artifact" ]; then
      #     #   echo "failed to create artifact directory"
      #     #   exit 1
      #     # fi
      
      # - name: upload generated code
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: autocoder-artifact-test-upload
      #     path: |
      #       ./autocoder-bot/docker-compose.yml         # include everything in the directory
      #       # !./autocoder-bot/*.tmp   # exclude temporary files
      #       # !./autocoder-bot/*.log   # exclude log files
      #     if-no-files-found: warn
      #     retention-days: 2

      - name: Pre Display results 
        run: |
          echo "List data:"
          ls -aR ./autocoder-bot

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: autocoder-artifact-test-upload
          path: ./autocoder-artifact
      
      - name: Display results
        run: |
          echo "Generated files:"
          ls -laR ~/autocoder-artifact


  