# IN PROGRESS: https://claude.ai/chat/379f7916-9ab8-4bff-8c81-f07bbd1a5719
# https://github.com/michaelangelovalente/test-seperate-action-repo/actions/runs/14154020418/job/39650858593
name: 'Autocoder Bot Action'
description: 'This action automates the process of generating code from Gtihub issues using taking advante of OpenAIs Chatgpt.
              It creates a pull request with the generated code allowing for a review before integrating it with the existing code'

author: 'Michael Valente'

inputs:
  #issue_title???
  issue_number:
    description: 'The number of the issue that will be used to trigger the action'
    required: true
  issue_body:
    description: 'Body of the issue'
    required: true
  issue_assignees:
    description: 'Issue assignees'
    required: true
  issue_label:
    description: 'The label assigned to Github issue that should be processed by the AutoCoder action. Only issues with this label will trigger the code generation process.'
    required: true
    default: 'autocoder-bot'
  issue_assigned_labels:
    description: 'The labels assigned to the github issue, will be compared with issue_label'
    required: true
    default: 'autocoder-bot'
  repository:
    description: 'The repository where the action will be executed'
    required: true
  openai_api_key:
    description: 'Api key for OpenAI, allows interactions with ChatGPT api used to generate code based on the issue description'
    required: true
  github_token:
    description: 'Personal Access token (PAT) used for Github API authentication. This token is required to create pull requests'
    required: true

outputs:
  pull_request_url:
    description: 'The URL of the pull request that has been automatically created, containing the auto-generated code for review and potential merging.'
  pull_request_number:
    description: 'The number of the created pull request.'


runs:
  using: 'composite'
  steps:
    - name: Greet Users
      run: echo "Hello, welcome to AutoCoder! Let's generate some code."
      shell: bash

    - name: Setup Github path
      run: echo "$GITHUB_ACTION_PATH" >> $GITHUB_PATH
      shell: bash
      env:
        GITHUB_ACTION_PATH: ${{ github.action_path }}

    # - name: Debug Environment
    #   shell: bash
    #   run: |
    #     echo "Current location: $(pwd)"
    #     echo "Action path: ${{ github.action_path }}"
    #     echo "Files in action path: $(ls -la ${{ github.action_path }})"
    #     echo "Scripts directory: $(ls -la ${{ github.action_path }}/scripts)"
    #     echo "Script file details: $(ls -la ${{ github.action_path }}/scripts/script.sh)"
    #     echo "Script file contents: $(cat ${{ github.action_path }}/scripts/script.sh)"

    - name: Make script executable
      shell: bash
      run: |
        echo "RUNNING SCRIPT 1"
        pwd
        echo "----------------------"
        ls -A
        echo "----------------------"
        tree
        echo "----------------------"
        chmod +x ${{ github.action_path }}/scripts/script.sh

    - name: Set environment variables
      shell: bash
      run: |
        echo "ISSUE_NUMBER=${{ inputs.issue_number }}" >> $GITHUB_ENV
        echo "ISSUE_BODY=${{ inputs.issue_body }}" >> $GITHUB_ENV
        echo "ISSUE_ASSIGNEES=${{ inputs.issue_assignees }}" >> $GITHUB_ENV
        echo "ISSUE_LABEL=${{ inputs.issue_label }}" >> $GITHUB_ENV
        echo "ISSUE_ASSIGNED_LABELS=${{ inputs.issue_assigned_labels }}" >> $GITHUB_ENV

        echo "REPOSITORY=${{ inputs.repository }}" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=${{ inputs.openai_api_key }}" >> $GITHUB_ENV
        echo "GITHUB_TOKEN=${{ inputs.github_token }}" >> $GITHUB_ENV
    
    - name: Validate issue information
      id: validate
      shell: bash
      run: |
        # Fail if required information is missing
        if [ -z "$ISSUE_BODY" ]; then
          echo "Error: Issue body is empty"
          exit 1
        fi
        # Output issue information for logging
        echo "issue_number=${ISSUE_NUMBER}" >> $GITHUB_OUTPUT
        echo "has_required_label=${{ contains(inputs.issue_assigned_labels, inputs.issue_label) }}" >> $GITHUB_OUTPUT

    - name: Run the script
      shell: bash
      run: |
        echo "RUNNING SCRIPT 2"
        ${{ github.action_path }}/scripts/script.sh $

  
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: autocoder-artifact
        path: ./autocoder-bot/
        if-no-files-found: error

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: autocoder-artifact
        path: ./autocoder-artifact/

    - name: List files recursively
      shell: bash
      run: ls -R ./autocoder-artifact/

    - name: Configure Git
      shell: bash
      run: |
        git config --local user.name 'autocoder-bot'
        git config --local user.email 'actions@github.com'

    - name: Copy artifacts contents
      shell: bash
      run: |
        # Copy artifacts
        cp -r ./autocoder-artifact/* ./
        # Delete autocoder artifact directory
        rm -rf ./autocoder-artifact
        mv autocoder-bot autocoder-artifact

    - name: Commit changes
      shell: bash
      run: |
        git add .
        git diff
        git commit -m "Feat: Commit generated code for issue #${{ env.ISSUE_NUMBER }}"

    - name: Create Pull Request
      id: cpr
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ inputs.github_token }}
        commit-message: "Pull request added generated code for issue #${{ env.ISSUE_NUMBER }}"
        title: "Autocoder: Generated Code Pull request from autocoder-bot for Issue #${{ env.ISSUE_NUMBER }}"
        body: "This PR contains autogenerated code based on the issue #${{ env.ISSUE_NUMBER }}"
        base: main
        branch: "autocoder-branch-${{ env.ISSUE_NUMBER }}"
        labels: |
          autocoder-bot
    #     base: main
    #     branch: "autocoder-branch-${{ env.ISSUE_NUMBER }}"
    #     labels: |
    #       autocoder-bot
    - name: Set output values
      id: set_outputs
      shell: bash
      run: |
        echo "pull_request_url=${{ steps.cpr.outputs.pull-request-url }}" >> $GITHUB_OUTPUT
        echo "pull_request_number=${{ steps.cpr.outputs.pull-request-number }}" >> $GITHUB_OUTPUT






